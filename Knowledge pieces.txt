
### R ###
#Import data
read.csv(file.choose())
df <- data.frame(col1 = c(1:3, NA),
                 col2 = c("this", NA,"is", "text"), 
                 col3 = c(2.5, 4.2, 3.2, NA),
                 stringsAsFactors = FALSE)

#Feature engineering
rowSums()
substr()

#Explorative analysis
facet_wrap(~vendor_id)
table(Avector, useNA = "ifany")
sort(Avector, na.last = TRUE)

#Format conversion
wday = fct_relevel(wday, c("Mon", "Tues", "Wed", "Thurs", "Fri", "Sat", "Sun"))
as.Date()
as.matrix()
paste() #factor to string


###Python Pandas###
#import data
pd.read_csv()

#Check the data
.head(20)
.info()
.dtypes
.columns
.index

#Count NAs
.count() #count of records excluding missing
.isnull().sum() #count of missing records
.isnull().count() #count of records including missing
.isnull().sum().sort_values(ascending = False)

#Fix NAs
.fillna()
.dropna()

#Stat summary
.describe()
.nlargest()
.max()
.mean()
.sum()
.std()

#Feature engineering
pd.concat()
pd.merge(df1,df2,on = "xxx", how = "outer")
pd.cut()
pd.qcut()
pd.melt(df, id_vars = [])
.replace(['a','b','c'] = [1,2,3])
.loc([condition],column) = xxx
.drop(column_list, axis = 1)
.groupby().describe()

#Format conversion
.astype()
.map()

#Explorative analysis
.plot.scatter()
.corr()
sns.heatmap(.corr(),)
sns.boxplot()
sns.pairplot()
.pivot(index = , columns = , values = )
.pivot_table(index = , columns = , aggfunc =, margins = True )
pd.crosstab(df.var1, df.var2, margins = True)

#Model preparation
pd.get_dummies()

#Model training
  # Some useful parameters which will come in handy later on
ntrain = train.shape[0]
ntest = test.shape[0]
SEED = 0 # for reproducibility
NFOLDS = 5 # set folds for out-of-fold prediction
kf = KFold(ntrain, n_folds= NFOLDS, random_state=SEED)

.fit(X,Y)
.train(X,Y)
.predict(X)
.feature_importances(x_train,y_train)

# Random Forest parameters
rf_params = {
    'n_jobs': -1,
    'n_estimators': 500,
     'warm_start': True, 
     #'max_features': 0.2,
    'max_depth': 6,
    'min_samples_leaf': 2,
    'max_features' : 'sqrt',
    'verbose': 0
}

# Extra Trees Parameters
et_params = {
    'n_jobs': -1,
    'n_estimators':500,
    #'max_features': 0.5,
    'max_depth': 8,
    'min_samples_leaf': 2,
    'verbose': 0
}

# AdaBoost parameters
ada_params = {
    'n_estimators': 500,
    'learning_rate' : 0.75
}

# Gradient Boosting parameters
gb_params = {
    'n_estimators': 500,
     #'max_features': 0.2,
    'max_depth': 5,
    'min_samples_leaf': 2,
    'verbose': 0
}

# Support Vector Classifier parameters 
svc_params = {
    'kernel' : 'linear',
    'C' : 0.025
    }

###Python Numpy###

a = np.arrary([5,6,7])              #Create a one dim arrary
a = np.array([[1,2],[3,4],[5,6]])   #Create a two dim array
a = np.arange(5)                    #Create a series of numbers
a = np.arange(1,5,2)                #Create a series of numbers by specifying start, stop, and step
a = np.linspace(1,5,10)             #Create a series of numbers by specifying start, stop, and # of numbers in between


a.ndim          #print the dim
a.itemsize      #item size
a.dtype         #type
a.size          #size
a.shape         #row by col
a.reshape(2,3)  #reshape to interested dimensions
a.ravel()       #flatten a array

a.min()
a.max()
a.sum()
a.sum(axis = 0) #col sum
a.sum(axis = 1) #row sum

np.sqrt(a)
np.std(a) 

a+b
a*b
a/b
a.dot(b)  #matrix multiplication

#index and slice
a[0:2]
a[-1]

#Stack
np.vstack((a,b))
np.hstach((a,b))

#Split
np.vsplit(a,2)
np.hsplit(a,3)


###Python Programming###
#General purpose
dir(Apackage)             #get the all the functions under a package
import sys
sys.path.append("C:\XXX") #Add path to python sys search
pip install Apackage      #Install packages
pip uninstall Apackage    #Uninstall packages

#list operation
Alist.append()
Alist.insert()      #e.g. Alist.insert(1,'butter')
len(Alist)
"astring" in Alist  #look up item in a list

#Use input
num = input("Enter a number: ") #Use enter a number

#If statement
if XXX:
  XXX
elif XXX:
  XXX
else:
  XXX
  
#For loop
For i in range(len(Alist)):
  XXX
  if XXX:
    continue
  if XXX:
    break

#While loop
i = 1
while i <=5:
  XXX
  i = i + 1

#Function
def Afunction(Aparam = a, Bparam = b):
  XXX
  return XXX
  
#Dictionary
del d["XXX"]    #Delete element
for k,v in d.items():
  pring ("key:", k, "value:", v)
d.clear()       #empty dictionary

#Tuple (immutable)
Atuple = (5,9)

#Write a file
f = open("C:\\XXX\\.txt", "w")  #"w" is write or overwrite, "a" is append, "r" is read
f.write("I Love Python")
f.close()

 #Read a file
f = open("C:\\XXX\\.txt", "r")
print(f.read())                
f.close()

#Open a file, read it and append word count for each line at the beginning
f = open("C:\\XXX\\File_to_Read.txt", "r") 
f_out = open("C:\\XXX\\File_To_Write.txt", "w")
for line in f:
  tokens = line.split(' ')
  f_out.write(" wordcount:" + str(len(tokens)) + line )
f.close()
f_out.close()

#With statement
with open("C:\\XXX\\File_to_Read.txt","r") as f:
  print(f.read())   #Use with statement to read file so that we do need to use .close() to close a file
print(f.closed)     #Check whether is file is closed

#Exception handling
x = input("Enter number1: ")
y = input("Enter number2: ")
try: 
  z = int(x)/int(y)
except ZeroDivisionError:
  print ('Division by zero exception')
  z = None
except TypeError:
  print ('Type error exception")
  z = None
print("Division is: ", z)

#Object oriented programming
class Human:
  def __init__(self, n, o):
    self.name = n
    self.occupation = o
  
  def do_work(self):
    if self.occupation == "tennis player":
      print(self.name, "plays tennis")
    elif self.occupation == "actor":
      print(self.name, "shoots film")
  
  def speaks(self):
    print(self.name, "says how are you?")

tom = Human("tom cruise","actor")
tom.do_work()
tom.speaks()

maria = Human("maria sharapova", "tennis player")
maria.do_work()
maria.speaks()
  

